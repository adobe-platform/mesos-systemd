[Unit]
Description=Chronos @ %i
# implied here that marathon requires mesos-master
After=docker.service mesos-master@%i.service marathon@%i.service
Requires=docker.service

[Service]
# NOTE: chronos doesn't need the `zk://`
Environment=ZOOKEEPER_HOST=localhost:2181
Environment="IMAGE=etcdctl get /images/chronos"
Environment="ZK_USERNAME=etcdctl get /zookeeper/config/username"
Environment="ZK_PASSWORD=etcdctl get /zookeeper/config/password"
Environment="ZK_ENDPOINT=etcdctl get /zookeeper/config/endpoint"
Environment="MESOS_USERNAME=etcdctl get /mesos/config/username"

User=core
Restart=always
RestartSec=20
TimeoutStartSec=0

ExecStartPre=/usr/bin/systemctl is-active update-os.service
ExecStartPre=/usr/bin/systemctl is-active zk-health.service
ExecStartPre=/usr/bin/systemctl is-active mesos-master@*
ExecStartPre=/usr/bin/bash -c "if [ ! -f /opt/mesos/framework-secret ]; then exit 1; fi"
ExecStartPre=/usr/bin/sh -c "docker pull $($IMAGE)"
ExecStartPre=-/usr/bin/docker kill chronos
ExecStartPre=-/usr/bin/docker rm chronos

ExecStart=/usr/bin/sh -c "docker run \
  --name chronos \
  --net=host \
  -v /opt/mesos/framework-secret:/opt/mesos/framework-secret:ro \
  --env LIBPROCESS_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4) \
  --env LIBPROCESS_PORT=4401 \
  $($IMAGE) \
  /usr/bin/chronos \
  run_jar \
  --http_port 4400 \
  --mesos_authentication_principal $($MESOS_USERNAME) \
  --mesos_authentication_secret_file /opt/mesos/framework-secret \
  --master zk://$($ZK_USERNAME):$($ZK_PASSWORD)@$(ZK_ENDPOINT)/mesos \
  --mesos_framework_name chronos-$(hostname) \
  --zk_hosts ${ZOOKEEPER_HOST}"

ExecStop=/usr/bin/docker stop chronos

[Install]
WantedBy=multi-user.target

[X-Fleet]
Global=false
MachineMetadata=role=control
MachineMetadata=ip=%i
